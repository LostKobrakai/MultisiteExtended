<?php
/**
 * Multisite Extended (0.0.1)
 * 
 * 
 * @author Benjamin Milde
 * 
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 * 
 */

class MultisiteExtended extends WireData implements Module {

	/**
	 * Name of the field the module does create to allow for the setup of multisite
	 * roots in any page of the tree.
	 *
	 */
	const fieldName = "multisite_root";
	const cacheName = "multisite_domains";

	/**
	 * @var array  $domainArray List of paths keyed by their domain
	 * @var string $it          Sanitized request path
	 * @var string $hitDomain   Domain, that does match the current requested page
	 * @var string $hitPagePath Path of the page, that holds the hit domain
	 * @var bool   $debugger    Determined if debug messages should be logged
	 *
	 */
	protected $domainArray = [];
	protected $it;
	protected $hitDomain;
	protected $hitPagePath;
	protected $debugger = false;

	/**
	 * Constuctor
	 */
	public function __construct() {
		include_once("SimpleCache.php");
	}

	/**
	 * Handle requests to "multisite" domains
	 *
	 * Keep in mind, that this runs before processwire's api variables are available.
	 */
	public function init() {

		$this->parseDomains();
		$this->parseGetRequest();
		$httpHost = strtolower(wire('config')->httpHost);

		if(!count($this->domainArray)) return;

		$this->logger("Domains: ".implode(", ", $this->domainArray));
		$this->logger("IT: ".$this->it);

		/**
		 * array_search seems to be slightly faster than foreach through the domains
		 * @see https://gist.github.com/Ocramius/1290076
		 */
		if($path = $this->searchDomains($httpHost)) {

			$this->hitDomain = $httpHost;
			$this->hitPagePath = $path;
			$_GET['it'] = $this->modifyGetRequest($path);
			$this->logger("New IT: ".$_GET['it']);
			$this->addHookAfter('Page::path', $this, 'modifyPath');
		}

		$this->logger("Hit: ".$this->hitDomain);
		$this->logger("Hit: ".$this->hitPagePath);

		$this->addHook("Pages::trashed", "clearCacheForTrashActions");
		$this->addHook("Pages::restored", "clearCacheForTrashActions");
		$this->addHook("Pages::deleted", "clearCacheForTrashActions");
	}

	/**
	 * Redirect to the multisite domain if one is available and the current page
	 * is not editable.
	 *
	 */
	public function ready() {
		if($this->hitDomain || 
			 !($domain = $this->isPagePartOfMultisiteTree()) ||
			 !count($this->domainArray)) return;

		$this->hitDomain = $domain;
		$this->hitPagePath = $this->searchDomains($domain);

		// if subdomain is visible on url, we might wanna redirect
		if(!$this->page->editable()) {
			$url = $this->createRedirectUrl($this->hitDomain, $this->hitPagePath);
			$this->session->redirect($url);
		}
	}

	/**
	 * The function, which runs on the Page::path hook
	 *
	 * Does remove the unneccessary part of the path that ProcessWire does provide.
	 *
	 * @param HookEvent $event 
	 *
	 */
	public function modifyPath($event) {
		$event->return = str_replace($this->hitPagePath, '', $event->return);
	}

	/**
	 * Parse the request path in a predictable format
	 *
	 */
	protected function parseGetRequest() {
		$this->it = (isset($_GET['it'])) ? ltrim($_GET['it'], '/') : '';
	}

	/**
	 * Search domainArray for domain
	 *
	 * @param string $domain Domain to search for
	 */
	protected function searchDomains($domain){
		return empty($this->domainArray[$domain]) ? false : $this->domainArray[$domain];
	}

	/**
	 * Create Domain alternatives based on the module's settings
	 *
	 * @todo make the "no-subdomain" selection more bulletprove (.co.uk)
	 * @param string $domain Domain to get alternatives from
	 * @return array Array of alternativ domains
	 *
	 */
	protected function createDomainAlternatives($domain) {
		$alternatives = array();

		if(substr_count($domain, ".") == 1 && count($this->subdomainOptions)){
			foreach ($this->subdomainOptions as $subdomain) {
				if($subdomain === "*") continue;

				$alternatives[] = $subdomain . "." . $domain;
			}
		}

		return $alternatives;
	}

	/**
	 * Return the request path that processwire should use instead
	 * of the requested multisite path.
	 *
	 * @param string $path Incoming request path
	 * @return string Path that processwire should use
	 */
	protected function modifyGetRequest($path) {
		return "/" . $path . $this->it;
	}

	/**
	 * Check if a given page is part of the multisite domains.
	 * Defaults to using the current page.
	 *
	 * @param Page $page Page to check on
	 * @return bool|string returns the domain if true
	 *
	 */
	protected function isPagePartOfMultisiteTree(Page $page = null) {
		if(is_null($page)) $page = $this->page;

		$root = $page->parent(self::fieldName."!=''");

		if(!$root->id) return false;

		if(in_array($root->get(self::fieldName), $this->domainArray)){
			return $root->get(self::fieldName);
		}else{
			return false;
		}
	}

	/**
	 * Create the redirect url to a multisite domain
	 *
	 * @param string $domain The domain to redirect to
	 * @param string $path The path to the domains root
	 * @return string The full url to redirect to
	 *
	 */
	protected function createRedirectUrl($domain, $path) {
		$path = trim($path, "/");
		$protocol = $this->config->https ? "https://" : "http://";
		$url = $protocol . $domain;
		$url .= str_replace("/$path/", '/', $this->page->path);
		return $url;
	}

	/**
	 * Internal function to enable logging of debug messages
	 *
	 */
	protected function logger($msg) {
		if(!$this->debugger) return;
		if(strpos($this->it, "admin") === 0) return;

		$this->log->save("modules", "MultisiteExtended | ".$msg);
	}

	/**
	 * Retrieve all domains setup in pages
	 *
	 * Cache will expire every 24h or if clearCache is enables in the module's
	 * settings.
	 *
	 * @param bool $skipCache Boolean value to determine skipping of the cache
	 * @return string List of "domain=path" values separated by linebreaks
	 *
	 */
	protected function getDomains($skipCache = false) {

		if(!$skipCache && $this->clearCache){ // Clear cache via modules settings
			$data = wire('modules')->getModuleConfigData($this->className());
			$data["clearCache"] = 0;
			wire('modules')->saveModuleConfigData($this->className(), $data);

			$skipCache = true;
		}

		$cache = self::getCacheObj( $skipCache ? 0 : 24 * 3600);
		$domains = $cache->get_cache(self::cacheName);

		if(!$domains) {
			$this->message("Regenerating Cache.");

			$domainRoots = wire('pages')->find(self::fieldName."!=''");

			if($domainRoots->count()){
				$domains = array();
				foreach ($domainRoots as $root) {

					$domain = $root->get(self::fieldName);
					$domain = trim($domain);
					$domain = strtolower($domain);

					$path = $root->path;
					$path = ltrim($path, "/");

			  	$domains[] = $domain."=".$path;

			  	$alternatives = $this->createDomainAlternatives($domain);

			  	foreach ($alternatives as $alt) {
			  		$domains[] = $alt."=".$path;
			  	}
				}

			  $domains = implode("\n", $domains);
		 	}else{
		 		$domains = '';
		 	}

		 	// Cache list for 24h
		  $cache->set_cache(self::cacheName, $domains);
		}

		return $domains;
	}

	/**
	 * Clear cache when page with domain is trashed/restored/deleted
	 */
	public function clearCacheForTrashActions($event) {
		$page = $event->arguments(0);

		if($page->fields->get(self::fieldName)){
			$data = wire('modules')->getModuleConfigData($this->className());
			$data["clearCache"] = 1;
			wire('modules')->saveModuleConfigData($this->className(), $data);
		}
	}

	/**
	 * Wrapper function for instanciated use
	 *
	 * @return array Array of domains keyed by their paths
	 *
	 */
	protected function parseDomains() {
		$domains = self::parse($this->getDomains());
		$this->domainArray = $domains;
		return $this->domainArray;
	}

	/**
	 * Parse the cached domainlist to an array
	 *
	 * @see self::getDomains for the domainlist generation
	 * @return array Array of paths keyed by their domains
	 *
	 */
	public static function parse($domains){
		$domains = explode("\n", trim($domains));

		// Remove potential empty lines
		$domains = array_filter($domains);

		foreach ($domains as $key => $domain) {
			list($domain, $path) = explode("=", $domain, 2);

			unset($domains[$key]);
			$domains[$domain] = $path;
		}

		return $domains;
	}

	/**
	 * Get the cache object
	 *
	 * @param int $expires Time in Seconds after which the cache expires, -1 to ignore it
	 * @return SimpleCache Cache Object to work with
	 *
	 */
	public static function getCacheObj($expires = 0) {
		include_once("SimpleCache.php");

		$cache = new SimpleCache();
		$cache->cache_path = dirname(__FILE__) . "/cache/";
		$cache->cache_time = (int) $expires;

		return $cache;
	}

	/**
	 * Extend the config.php whitelist with the cached domains
	 *
	 * Usage in config.php:
	 * include_once("modules/MultisiteExtended/MultisiteExtended.module");
	 * $config->httpHosts = MultisiteExtended::extendHostWhitelist(array(
	 *   'example.com',
	 *   'www.example.com'
	 * ));
	 * 
	 * @param array $whitelist Default whitelist to extend
	 * @return array Extended list of whitelisted domains
	 *
	 */
	public static function extendHostWhitelist($whitelist){
		$cache = self::getCacheObj(-1);
		$domains = $cache->get_cache(self::cacheName);

		if(!$domains) return $whitelist;

		$domainArray = self::parse($domains);
		$concat = array_merge($whitelist, array_keys($domainArray));
		return array_unique($concat);
	}

	/**
	 * Module installation
	 * Create the multisite root setup field
	 * 
	 */
	public function ___install() {
		$f = new Field();
		$f->type = $this->modules->get("FieldtypeTextUnique");
		$f->name = self::fieldName;
		$f->label = $this->_("Multisite Root");
		$f->description = $this->_('Make the child tree available through this domain.');
		$f->notes = $this->_("Omit subdomains as long as the page should also be visible without the subdomain");
		$f->placeholder = $this->_("domain.com");
		$f->noRelative = 0;
		$f->pattern = "([a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.)?[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}";
		$f->save(); // save the field
	}

	/**
	 * Module uninstallation
	 * Removes the multisite root setup field if it's existing.
	 * Removes the cachefile if exisiting.
	 * 
	 */
	public function ___uninstall() {
		$field = $this->fields->get(self::fieldName);

		if($field->id){
			foreach($field->getFieldgroups() as $fieldgroup){
				$fieldgroup->remove($field);
				$fieldgroup->save();
			}

			$this->fields->delete($field);
		}

		$cache = self::getCacheObj(0);
		$domains = $cache->remove_cache(self::cacheName);
	}

}